{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { USER_STATE_CHANGE, ALL_USERS_STATE_CHANGE, USER_BLOCKING_STATE_CHANGE, LIKES_STATE_CHANGE, FADES_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, NFL_GAMES_STATE_CHANGE, NCAAF_GAMES_STATE_CHANGE, MLB_GAMES_STATE_CHANGE, NBA_GAMES_STATE_CHANGE, NCAAB_GAMES_STATE_CHANGE, EPL_GAMES_STATE_CHANGE, MMA_GAMES_STATE_CHANGE, GOLF_GAMES_STATE_CHANGE, FUTURE_GAMES_STATE_CHANGE, FORMULA1_TEAMS_STATE_CHANGE, FORMULA1_RACES_STATE_CHANGE, FORMULA1_DRIVERS_STATE_CHANGE, FORMULA1_RANKINGS_STATE_CHANGE, NHL_GAMES_STATE_CHANGE, ALL_POSTS_STATE_CHANGE, CONTEST_STATUS_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport firebase from 'firebase';\nimport { SnapshotViewIOSComponent } from \"react-native-web/dist/index\";\n\nrequire('firebase/firestore');\n\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firestore().collection(\"users\").doc(auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {}\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firestore().collection(\"following\").doc(auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUserBlocking() {\n  return function (dispatch) {\n    firestore().collection(\"blocking\").doc(auth().currentUser.uid).collection(\"userBlocking\").onSnapshot(function (snapshot) {\n      var blocking = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_BLOCKING_STATE_CHANGE,\n        blocking: blocking\n      });\n\n      for (var i = 0; i < blocking.length; i++) {}\n    });\n  };\n}\nexport function fetchLikes() {\n  return function (dispatch) {\n    firestore().collection(\"likes\").doc(auth().currentUser.uid).collection(\"userLikes\").onSnapshot(function (snapshot) {\n      var liked = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: LIKES_STATE_CHANGE,\n        liked: liked\n      });\n\n      for (var i = 0; i < liked.length; i++) {}\n    });\n  };\n}\nexport function fetchFades() {\n  return function (dispatch) {\n    firestore().collection(\"fades\").doc(auth().currentUser.uid).collection(\"userFades\").onSnapshot(function (snapshot) {\n      var faded = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: FADES_STATE_CHANGE,\n        faded: faded\n      });\n\n      for (var i = 0; i < faded.length; i++) {}\n    });\n  };\n}\nexport function fetchAllUsers() {\n  return function (dispatch) {\n    firestore().collection(\"users\").onSnapshot(function (snapshot) {\n      var allUsers = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: ALL_USERS_STATE_CHANGE,\n        allUsers: allUsers\n      });\n\n      for (var i = 0; i < allUsers.length; i++) {}\n    });\n  };\n}\nexport function fetchAllPosts(uid) {\n  var ourDate = new Date();\n  var pastDate = ourDate.getDate() - 3;\n  ourDate.setDate(pastDate);\n  return function (dispatch) {\n    firestore().collectionGroup(\"userPosts\").where(\"creation\", \">=\", ourDate).orderBy('creation', 'desc').get().then(function (snapshot) {\n      var allPosts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: ALL_POSTS_STATE_CHANGE,\n        allPosts: allPosts\n      });\n\n      for (var i = 0; i < allPosts.length; i++) {}\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {}\n      });\n    }\n  };\n}\nexport function fetchMLBGames() {\n  return function (dispatch) {\n    firestore().collection(\"mlb\").orderBy('gameDate', 'desc').onSnapshot(function (snapshot) {\n      var mlbGames = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: MLB_GAMES_STATE_CHANGE,\n        mlbGames: mlbGames\n      });\n\n      for (var i = 0; i < mlbGames.length; i++) {}\n    });\n  };\n}\nexport function fetchNFLGames() {\n  return function (dispatch) {\n    firestore().collection(\"nfl\").orderBy('gameDate', 'desc').onSnapshot(function (snapshot) {\n      var nflGames = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: NFL_GAMES_STATE_CHANGE,\n        nflGames: nflGames\n      });\n\n      for (var i = 0; i < nflGames.length; i++) {}\n    });\n  };\n}\nexport function fetchNCAAFGames() {\n  return function (dispatch) {\n    firestore().collection(\"ncaaf\").orderBy('gameDate', 'desc').onSnapshot(function (snapshot) {\n      var ncaafGames = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: NCAAF_GAMES_STATE_CHANGE,\n        ncaafGames: ncaafGames\n      });\n\n      for (var i = 0; i < ncaafGames.length; i++) {}\n    });\n  };\n}\nexport function fetchMMAGames() {\n  return function (dispatch) {\n    firestore().collection(\"mma\").orderBy('gameDate', 'desc').onSnapshot(function (snapshot) {\n      var mmaGames = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: MMA_GAMES_STATE_CHANGE,\n        mmaGames: mmaGames\n      });\n\n      for (var i = 0; i < mmaGames.length; i++) {}\n    });\n  };\n}\nexport function fetchEPLGames() {\n  return function (dispatch) {\n    firestore().collection(\"epl\").orderBy('gameDate', 'desc').onSnapshot(function (snapshot) {\n      var eplGames = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: EPL_GAMES_STATE_CHANGE,\n        eplGames: eplGames\n      });\n\n      for (var i = 0; i < eplGames.length; i++) {}\n    });\n  };\n}\nexport function fetchFutureGames() {\n  return function (dispatch) {\n    firestore().collection(\"futures\").onSnapshot(function (snapshot) {\n      var futureGames = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: FUTURE_GAMES_STATE_CHANGE,\n        futureGames: futureGames\n      });\n\n      for (var i = 0; i < futureGames.length; i++) {}\n    });\n  };\n}\nexport function fetchFormula1Teams() {\n  return function (dispatch) {\n    firestore().collection(\"formula1\").doc(\"info\").collection(\"teams\").orderBy('currentSeasonRank', 'asc').onSnapshot(function (snapshot) {\n      var formula1Teams = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: FORMULA1_TEAMS_STATE_CHANGE,\n        formula1Teams: formula1Teams\n      });\n    });\n  };\n}\nexport function fetchFormula1Races() {\n  return function (dispatch) {\n    firestore().collection(\"formula1\").doc(\"info\").collection(\"races\").doc(\"currentRace\").get().then(function (snapshot) {\n      if (snapshot.exists) {\n        var formula1Races = snapshot.data();\n        dispatch({\n          type: FORMULA1_RACES_STATE_CHANGE,\n          formula1Races: formula1Races\n        });\n      } else {}\n    });\n  };\n}\nexport function fetchFormula1Drivers() {\n  return function (dispatch) {\n    firestore().collection(\"formula1\").doc(\"info\").collection(\"drivers\").orderBy('driverRank', 'asc').onSnapshot(function (snapshot) {\n      var formula1Drivers = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: FORMULA1_DRIVERS_STATE_CHANGE,\n        formula1Drivers: formula1Drivers\n      });\n    });\n  };\n}\nexport function fetchFormula1Rankings() {\n  return function (dispatch) {\n    firestore().collection(\"formula1\").doc(\"info\").collection(\"races\").orderBy('driverPosition', 'asc').onSnapshot(function (snapshot) {\n      var formula1Rankings = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: FORMULA1_RANKINGS_STATE_CHANGE,\n        formula1Rankings: formula1Rankings\n      });\n    });\n  };\n}\nexport function fetchContestStatus() {\n  return function (dispatch) {\n    firestore().collection(\"contest\").doc('oKeXGH8M6mmdawUvxADp').get().then(function (snapshot) {\n      if (snapshot.exists) {\n        var contestStatus = snapshot.data();\n        dispatch({\n          type: CONTEST_STATUS_STATE_CHANGE,\n          contestStatus: contestStatus\n        });\n      } else {}\n    });\n  };\n}","map":{"version":3,"names":["USER_STATE_CHANGE","ALL_USERS_STATE_CHANGE","USER_BLOCKING_STATE_CHANGE","LIKES_STATE_CHANGE","FADES_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","NFL_GAMES_STATE_CHANGE","NCAAF_GAMES_STATE_CHANGE","MLB_GAMES_STATE_CHANGE","NBA_GAMES_STATE_CHANGE","NCAAB_GAMES_STATE_CHANGE","EPL_GAMES_STATE_CHANGE","MMA_GAMES_STATE_CHANGE","GOLF_GAMES_STATE_CHANGE","FUTURE_GAMES_STATE_CHANGE","FORMULA1_TEAMS_STATE_CHANGE","FORMULA1_RACES_STATE_CHANGE","FORMULA1_DRIVERS_STATE_CHANGE","FORMULA1_RANKINGS_STATE_CHANGE","NHL_GAMES_STATE_CHANGE","ALL_POSTS_STATE_CHANGE","CONTEST_STATUS_STATE_CHANGE","CLEAR_DATA","firebase","SnapshotViewIOSComponent","require","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","fetchUserFollowing","onSnapshot","following","docs","map","id","i","length","fetchUsersData","fetchUserBlocking","blocking","fetchLikes","liked","fetchFades","faded","fetchAllUsers","allUsers","fetchAllPosts","ourDate","Date","pastDate","getDate","setDate","collectionGroup","where","orderBy","allPosts","getPosts","getState","found","usersState","users","some","el","user","fetchMLBGames","mlbGames","fetchNFLGames","nflGames","fetchNCAAFGames","ncaafGames","fetchMMAGames","mmaGames","fetchEPLGames","eplGames","fetchFutureGames","futureGames","fetchFormula1Teams","formula1Teams","fetchFormula1Races","formula1Races","fetchFormula1Drivers","formula1Drivers","fetchFormula1Rankings","formula1Rankings","fetchContestStatus","contestStatus"],"sources":["C:/Users/pauls/Documents/LoccToccDev/frontend/redux/actions/index.js"],"sourcesContent":["import { USER_STATE_CHANGE, \r\n    ALL_USERS_STATE_CHANGE, \r\n    USER_BLOCKING_STATE_CHANGE, \r\n    LIKES_STATE_CHANGE, \r\n    FADES_STATE_CHANGE, \r\n    USER_FOLLOWING_STATE_CHANGE, \r\n    USERS_DATA_STATE_CHANGE, \r\n    NFL_GAMES_STATE_CHANGE, \r\n    NCAAF_GAMES_STATE_CHANGE, \r\n    MLB_GAMES_STATE_CHANGE,\r\n    NBA_GAMES_STATE_CHANGE, \r\n    NCAAB_GAMES_STATE_CHANGE,\r\n    EPL_GAMES_STATE_CHANGE,\r\n    MMA_GAMES_STATE_CHANGE,\r\n    GOLF_GAMES_STATE_CHANGE,\r\n    FUTURE_GAMES_STATE_CHANGE,\r\n    FORMULA1_TEAMS_STATE_CHANGE,\r\n    FORMULA1_RACES_STATE_CHANGE,\r\n    FORMULA1_DRIVERS_STATE_CHANGE,\r\n    FORMULA1_RANKINGS_STATE_CHANGE,\r\n    NHL_GAMES_STATE_CHANGE, \r\n    ALL_POSTS_STATE_CHANGE,\r\n    CONTEST_STATUS_STATE_CHANGE,\r\n    CLEAR_DATA\r\n    } from '../constants/index'\r\nimport firebase from 'firebase'\r\nimport { SnapshotViewIOSComponent } from 'react-native'\r\nrequire('firebase/firestore')\r\n\r\n\r\nexport function clearData() {\r\n    return ((dispatch) => {\r\n        dispatch({type: CLEAR_DATA})\r\n    })\r\n}\r\n\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"users\")\r\n            .doc(auth().currentUser.uid)\r\n            .get()\r\n            .then((snapshot) => {\r\n                if (snapshot.exists) {\r\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\r\n                }\r\n                else {\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserFollowing() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"following\")\r\n            .doc(auth().currentUser.uid)\r\n            .collection(\"userFollowing\")\r\n            .onSnapshot((snapshot) => {\r\n                let following = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\r\n                for(let i = 0; i < following.length; i++){\r\n                    dispatch(fetchUsersData(following[i], true));\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserBlocking() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"blocking\")\r\n            .doc(auth().currentUser.uid)\r\n            .collection(\"userBlocking\")\r\n            .onSnapshot((snapshot) => {\r\n                let blocking = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({ type: USER_BLOCKING_STATE_CHANGE, blocking });\r\n                for(let i = 0; i < blocking.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchLikes() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"likes\")\r\n            .doc(auth().currentUser.uid)\r\n            .collection(\"userLikes\")\r\n            .onSnapshot((snapshot) => {\r\n                let liked = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({ type: LIKES_STATE_CHANGE, liked });\r\n                for(let i = 0; i < liked.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchFades() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"fades\")\r\n            .doc(auth().currentUser.uid)\r\n            .collection(\"userFades\")\r\n            .onSnapshot((snapshot) => {\r\n                let faded = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({ type: FADES_STATE_CHANGE, faded });\r\n                for(let i = 0; i < faded.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchAllUsers() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"users\")\r\n            .onSnapshot((snapshot) => {\r\n                let allUsers = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: ALL_USERS_STATE_CHANGE, allUsers });\r\n                for(let i = 0; i < allUsers.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchAllPosts(uid) {\r\n    var ourDate = new Date();\r\n    var pastDate = ourDate.getDate() - 3;\r\n    ourDate.setDate(pastDate);\r\n\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collectionGroup(\"userPosts\")\r\n            .where(\"creation\", \">=\", ourDate)\r\n            .orderBy('creation', 'desc')\r\n            .get()\r\n            .then((snapshot) => {\r\n                let allPosts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: ALL_POSTS_STATE_CHANGE, allPosts });\r\n                for(let i = 0; i < allPosts.length; i++){\r\n                }\r\n            })\r\n\r\n    })\r\n}\r\n\r\nexport function fetchUsersData(uid, getPosts) {\r\n    return ((dispatch, getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n        if (!found) {\r\n            firestore()\r\n                .collection(\"users\")\r\n                .doc(uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        let user = snapshot.data();\r\n                        user.uid = snapshot.id;\r\n\r\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user })\r\n                    }\r\n                    else {\r\n                    }\r\n                })\r\n                \r\n        }\r\n    })\r\n}\r\n\r\nexport function fetchMLBGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"mlb\")\r\n            .orderBy('gameDate', 'desc')\r\n            .onSnapshot((snapshot) => {\r\n                let mlbGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: MLB_GAMES_STATE_CHANGE, mlbGames });\r\n                for(let i = 0; i < mlbGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchNFLGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"nfl\")\r\n            .orderBy('gameDate', 'desc')\r\n            .onSnapshot((snapshot) => {\r\n                let nflGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: NFL_GAMES_STATE_CHANGE, nflGames });\r\n                for(let i = 0; i < nflGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchNCAAFGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"ncaaf\")\r\n            .orderBy('gameDate', 'desc')\r\n            .onSnapshot((snapshot) => {\r\n                let ncaafGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: NCAAF_GAMES_STATE_CHANGE, ncaafGames });\r\n                for(let i = 0; i < ncaafGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchMMAGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"mma\")\r\n            .orderBy('gameDate', 'desc')\r\n            .onSnapshot((snapshot) => {\r\n                let mmaGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: MMA_GAMES_STATE_CHANGE, mmaGames });\r\n                for(let i = 0; i < mmaGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchEPLGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"epl\")\r\n            .orderBy('gameDate', 'desc')\r\n            .onSnapshot((snapshot) => {\r\n                let eplGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: EPL_GAMES_STATE_CHANGE, eplGames });\r\n                for(let i = 0; i < eplGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\n/*export function fetchGolfGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"golf\")\r\n            .onSnapshot((snapshot) => {\r\n                let golfGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: GOLF_GAMES_STATE_CHANGE, golfGames });\r\n                for(let i = 0; i < golfGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n} */\r\n\r\nexport function fetchFutureGames() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"futures\")\r\n            .onSnapshot((snapshot) => {\r\n                let futureGames = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: FUTURE_GAMES_STATE_CHANGE, futureGames });\r\n                for(let i = 0; i < futureGames.length; i++){\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchFormula1Teams() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"formula1\")\r\n            .doc(\"info\")\r\n            .collection(\"teams\")\r\n            .orderBy('currentSeasonRank', 'asc')\r\n            .onSnapshot((snapshot) => {\r\n                let formula1Teams = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: FORMULA1_TEAMS_STATE_CHANGE, formula1Teams });\r\n                \r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchFormula1Races() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"formula1\")\r\n            .doc(\"info\")\r\n            .collection(\"races\")\r\n            .doc(\"currentRace\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                if (snapshot.exists) {\r\n                    let formula1Races = snapshot.data();\r\n\r\n                    dispatch({  type: FORMULA1_RACES_STATE_CHANGE, formula1Races})\r\n                }\r\n                else {\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchFormula1Drivers() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"formula1\")\r\n            .doc(\"info\")\r\n            .collection(\"drivers\")\r\n            .orderBy('driverRank', 'asc')\r\n            .onSnapshot((snapshot) => {\r\n                let formula1Drivers = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: FORMULA1_DRIVERS_STATE_CHANGE, formula1Drivers });\r\n                \r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchFormula1Rankings() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"formula1\")\r\n            .doc(\"info\")\r\n            .collection(\"races\")\r\n            .orderBy('driverPosition', 'asc')\r\n            .onSnapshot((snapshot) => {\r\n                let formula1Rankings = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data }\r\n                })\r\n                dispatch({ type: FORMULA1_RANKINGS_STATE_CHANGE, formula1Rankings });\r\n                \r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchContestStatus() {\r\n    return ((dispatch) => {\r\n        firestore()\r\n            .collection(\"contest\")\r\n            .doc('oKeXGH8M6mmdawUvxADp')\r\n            .get()\r\n            .then((snapshot) => {\r\n                if (snapshot.exists) {\r\n                    let contestStatus = snapshot.data();\r\n\r\n                    dispatch({ type: CONTEST_STATUS_STATE_CHANGE, contestStatus})\r\n                }\r\n                else {\r\n                }\r\n            })\r\n                \r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        \r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}