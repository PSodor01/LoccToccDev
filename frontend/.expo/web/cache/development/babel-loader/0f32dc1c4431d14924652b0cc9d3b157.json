{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport StoreReview from \"./ExpoStoreReview\";\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", StoreReview.isAvailableAsync());\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestReview() {\n  var url, supported;\n  return _regeneratorRuntime.async(function requestReview$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(StoreReview != null && StoreReview.requestReview)) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(StoreReview.requestReview());\n\n        case 3:\n          return _context2.abrupt(\"return\");\n\n        case 4:\n          url = storeUrl();\n\n          if (!url) {\n            _context2.next = 17;\n            break;\n          }\n\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(Linking.canOpenURL(url));\n\n        case 8:\n          supported = _context2.sent;\n\n          if (supported) {\n            _context2.next = 13;\n            break;\n          }\n\n          console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n          _context2.next = 15;\n          break;\n\n        case 13:\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap(Linking.openURL(url));\n\n        case 15:\n          _context2.next = 18;\n          break;\n\n        case 17:\n          console.warn(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function storeUrl() {\n  var _manifest2$extra, _manifest2$extra$expo, _manifest2$extra2, _manifest2$extra2$exp;\n\n  var manifest = Constants.manifest,\n      manifest2 = Constants.manifest2;\n\n  if (Platform.OS === 'ios' && manifest != null && manifest.ios) {\n    var _manifest$ios$appStor;\n\n    return (_manifest$ios$appStor = manifest.ios.appStoreUrl) != null ? _manifest$ios$appStor : null;\n  } else if (Platform.OS === 'ios' && manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra$expo = _manifest2$extra.expoClient) != null && _manifest2$extra$expo.ios) {\n    var _manifest2$extra$expo2;\n\n    return (_manifest2$extra$expo2 = manifest2.extra.expoClient.ios.appStoreUrl) != null ? _manifest2$extra$expo2 : null;\n  } else if (Platform.OS === 'android' && manifest != null && manifest.android) {\n    var _manifest$android$pla;\n\n    return (_manifest$android$pla = manifest.android.playStoreUrl) != null ? _manifest$android$pla : null;\n  } else if (Platform.OS === 'android' && manifest2 != null && (_manifest2$extra2 = manifest2.extra) != null && (_manifest2$extra2$exp = _manifest2$extra2.expoClient) != null && _manifest2$extra2$exp.android) {\n    var _manifest2$extra$expo3;\n\n    return (_manifest2$extra$expo3 = manifest2.extra.expoClient.android.playStoreUrl) != null ? _manifest2$extra$expo3 : null;\n  }\n\n  return null;\n}\nexport function hasAction() {\n  return _regeneratorRuntime.async(function hasAction$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.t0 = !!storeUrl();\n\n          if (_context3.t0) {\n            _context3.next = 5;\n            break;\n          }\n\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(isAvailableAsync());\n\n        case 4:\n          _context3.t0 = _context3.sent;\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.t0);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/StoreReview.ts"],"names":[],"mappings":";AAAA,OAAO,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAK,OAAZ,MAAyB,cAAzB;AACA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,OAAO,WAAP;AAWA,OAAO,SAAe,gBAAf;EAAA;IAAA;MAAA;QAAA;UAAA,iCACE,WAAW,CAAC,gBAAZ,EADF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAWP,OAAO,SAAe,aAAf;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,MACD,WADC,YACD,WAAW,CAAE,aADZ;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAEG,WAAW,CAAC,aAAZ,EAFH;;QAAA;UAAA;;QAAA;UAMC,GAND,GAMO,QAAQ,EANf;;UAAA,KAOD,GAPC;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAQqB,OAAO,CAAC,UAAR,CAAmB,GAAnB,CARrB;;QAAA;UAQG,SARH;;UAAA,IASE,SATF;YAAA;YAAA;UAAA;;UAUD,OAAO,CAAC,IAAR,CAAa,0DAAb,EAAyE,GAAzE;UAVC;UAAA;;QAAA;UAAA;UAAA,iCAYK,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAZL;;QAAA;UAAA;UAAA;;QAAA;UAgBH,OAAO,CAAC,IAAR,CACE,oKADF;;QAhBG;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AA6BP,OAAM,SAAU,QAAV,GAAkB;EAAA;;EACtB,IAAQ,QAAR,GAAgC,SAAhC,CAAQ,QAAR;EAAA,IAAkB,SAAlB,GAAgC,SAAhC,CAAkB,SAAlB;;EACA,IAAI,QAAQ,CAAC,EAAT,KAAgB,KAAhB,IAAyB,QAAzB,YAAyB,QAAQ,CAAE,GAAvC,EAA4C;IAAA;;IAC1C,gCAAO,QAAQ,CAAC,GAAT,CAAa,WAApB,oCAAmC,IAAnC;EACD,CAFD,MAEO,IAAI,QAAQ,CAAC,EAAT,KAAgB,KAAhB,IAAyB,SAAzB,gCAAyB,SAAS,CAAE,KAApC,sCAAyB,iBAAkB,UAA3C,aAAyB,sBAA8B,GAA3D,EAAgE;IAAA;;IACrE,iCAAO,SAAS,CAAC,KAAV,CAAgB,UAAhB,CAA2B,GAA3B,CAA+B,WAAtC,qCAAqD,IAArD;EACD,CAFM,MAEA,IAAI,QAAQ,CAAC,EAAT,KAAgB,SAAhB,IAA6B,QAA7B,YAA6B,QAAQ,CAAE,OAA3C,EAAoD;IAAA;;IACzD,gCAAO,QAAQ,CAAC,OAAT,CAAiB,YAAxB,oCAAwC,IAAxC;EACD,CAFM,MAEA,IAAI,QAAQ,CAAC,EAAT,KAAgB,SAAhB,IAA6B,SAA7B,iCAA6B,SAAS,CAAE,KAAxC,sCAA6B,kBAAkB,UAA/C,aAA6B,sBAA8B,OAA/D,EAAwE;IAAA;;IAC7E,iCAAO,SAAS,CAAC,KAAV,CAAgB,UAAhB,CAA2B,OAA3B,CAAmC,YAA1C,qCAA0D,IAA1D;EACD;;EACD,OAAO,IAAP;AACD;AAgBD,OAAO,SAAe,SAAf;EAAA;IAAA;MAAA;QAAA;UAAA,eACE,CAAC,CAAC,QAAQ,EADZ;;UAAA;YAAA;YAAA;UAAA;;UAAA;UAAA,iCACyB,gBAAgB,EADzC;;QAAA;UAAA;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import Constants from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\n\nimport StoreReview from './ExpoStoreReview';\n\n// @needsAudit\n/**\n * Determines if the platform has the capabilities to use `StoreReview.requestReview()`.\n * @return\n * This returns a promise fulfills with `boolean`, depending on the platform:\n * - On iOS, it will resolve to `true` if the device is running iOS 10.3+.\n * - On Android, it will resolve to `true` if the device is running Android 5.0+.\n * - On Web, it will resolve to `false`.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return StoreReview.isAvailableAsync();\n}\n\n// @needsAudit\n/**\n * In ideal circumstances this will open a native modal and allow the user to select a star rating\n * that will then be applied to the App Store, without leaving the app. If the device is running\n * a version of iOS lower than 10.3, or a version of Android lower than 5.0, this will attempt\n * to get the store URL and link the user to it.\n */\nexport async function requestReview(): Promise<void> {\n  if (StoreReview?.requestReview) {\n    await StoreReview.requestReview();\n    return;\n  }\n  // If StoreReview is unavailable then get the store URL from `app.config.js` or `app.json` and open the store\n  const url = storeUrl();\n  if (url) {\n    const supported = await Linking.canOpenURL(url);\n    if (!supported) {\n      console.warn(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n    } else {\n      await Linking.openURL(url);\n    }\n  } else {\n    // If the store URL is missing, let the dev know.\n    console.warn(\n      \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n    );\n  }\n}\n\n// @needsAudit\n/**\n * This uses the `Constants` API to get the `Constants.manifest.ios.appStoreUrl` on iOS, or the\n * `Constants.manifest.android.playStoreUrl` on Android.\n *\n * On Web this will return `null`.\n */\nexport function storeUrl(): string | null {\n  const { manifest, manifest2 } = Constants;\n  if (Platform.OS === 'ios' && manifest?.ios) {\n    return manifest.ios.appStoreUrl ?? null;\n  } else if (Platform.OS === 'ios' && manifest2?.extra?.expoClient?.ios) {\n    return manifest2.extra.expoClient.ios.appStoreUrl ?? null;\n  } else if (Platform.OS === 'android' && manifest?.android) {\n    return manifest.android.playStoreUrl ?? null;\n  } else if (Platform.OS === 'android' && manifest2?.extra?.expoClient?.android) {\n    return manifest2.extra.expoClient.android.playStoreUrl ?? null;\n  }\n  return null;\n}\n\n// @needsAudit\n/**\n * @return This returns a promise that fulfills to `true` if `StoreReview.requestReview()` is capable\n * directing the user to some kind of store review flow. If the app config (`app.json`) does not\n * contain store URLs and native store review capabilities are not available then the promise\n * will fulfill to `false`.\n *\n * @example\n * ```ts\n * if (await StoreReview.hasAction()) {\n *   // you can call StoreReview.requestReview()\n * }\n * ```\n */\nexport async function hasAction(): Promise<boolean> {\n  return !!storeUrl() || (await isAvailableAsync());\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}