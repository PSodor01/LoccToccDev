{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { DEFAULT_APP_OPTIONS } from 'expo-firebase-core';\nimport { CodedError } from 'expo-modules-core';\n\nfunction getFirebaseModule() {\n  try {\n    var firebaseModule = require('firebase/compat/app');\n\n    var firebase = firebaseModule.initializeApp ? firebaseModule : firebaseModule.default;\n\n    if (DEFAULT_APP_OPTIONS && !firebase.apps.length) {\n      firebase.initializeApp(DEFAULT_APP_OPTIONS);\n    }\n\n    return firebase;\n  } catch (_ref) {\n    var message = _ref.message;\n    throw new Error('Firebase JS SDK is not installed: ' + message);\n  }\n}\n\nfunction getAnalyticsModule() {\n  try {\n    var firebase = getFirebaseModule();\n\n    require('firebase/compat/analytics');\n\n    return firebase.analytics();\n  } catch (_ref2) {\n    var message = _ref2.message;\n    throw new Error('Firebase JS Analytics SDK is not available: ' + message);\n  }\n}\n\nexport default {\n  get name() {\n    return 'ExpoFirebaseAnalytics';\n  },\n\n  logEvent: function logEvent(name, properties) {\n    return _regeneratorRuntime.async(function logEvent$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            getAnalyticsModule().logEvent(name, properties);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setAnalyticsCollectionEnabled: function setAnalyticsCollectionEnabled(isEnabled) {\n    return _regeneratorRuntime.async(function setAnalyticsCollectionEnabled$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            getAnalyticsModule().setAnalyticsCollectionEnabled(isEnabled);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setSessionTimeoutDuration: function setSessionTimeoutDuration(_sessionTimeoutInterval) {\n    return _regeneratorRuntime.async(function setSessionTimeoutDuration$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setUserId: function setUserId(userId) {\n    return _regeneratorRuntime.async(function setUserId$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            getAnalyticsModule().setUserId(userId);\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setUserProperties: function setUserProperties(properties) {\n    return _regeneratorRuntime.async(function setUserProperties$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            getAnalyticsModule().setUserProperties(properties);\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setUnavailabilityLogging: function setUnavailabilityLogging(isEnabled) {},\n  setDebugModeEnabled: function setDebugModeEnabled(isEnabled) {\n    return _regeneratorRuntime.async(function setDebugModeEnabled$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            throw new CodedError('ERR_FIREBASE_NOTCONFIGURED', \"setDebugModeEnabled is not available on the web. See \\\"https://firebase.google.com/docs/analytics/debugview\\\" on how to enable debug mode.\");\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoFirebaseAnalytics.web.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,oBAApC;AACA,SAAS,UAAT,QAA2B,mBAA3B;;AAEA,SAAS,iBAAT,GAA0B;EACxB,IAAI;IACF,IAAM,cAAc,GAAG,OAAO,CAAC,qBAAD,CAA9B;;IACA,IAAM,QAAQ,GAAG,cAAc,CAAC,aAAf,GAA+B,cAA/B,GAAgD,cAAc,CAAC,OAAhF;;IACA,IAAI,mBAAmB,IAAI,CAAC,QAAQ,CAAC,IAAT,CAAc,MAA1C,EAAkD;MAChD,QAAQ,CAAC,aAAT,CAAuB,mBAAvB;IACD;;IACD,OAAO,QAAP;EACD,CAPD,CAOE,aAAoB;IAAA,IAAX,OAAW,QAAX,OAAW;IACpB,MAAM,IAAI,KAAJ,CAAU,uCAAuC,OAAjD,CAAN;EACD;AACF;;AACD,SAAS,kBAAT,GAA2B;EACzB,IAAI;IACF,IAAM,QAAQ,GAAG,iBAAiB,EAAlC;;IACA,OAAO,CAAC,2BAAD,CAAP;;IACA,OAAO,QAAQ,CAAC,SAAT,EAAP;EACD,CAJD,CAIE,cAAoB;IAAA,IAAX,OAAW,SAAX,OAAW;IACpB,MAAM,IAAI,KAAJ,CAAU,iDAAiD,OAA3D,CAAN;EACD;AACF;;AAED,eAAe;EACb,IAAI,IAAJ,GAAQ;IACN,OAAO,uBAAP;EACD,CAHY;;EAOP,QAPO,oBAOE,IAPF,EAOgB,UAPhB;IAAA;MAAA;QAAA;UAAA;YAQX,kBAAkB,GAAG,QAArB,CAA8B,IAA9B,EAAoC,UAApC;;UARW;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAaP,6BAbO,yCAauB,SAbvB;IAAA;MAAA;QAAA;UAAA;YAcX,kBAAkB,GAAG,6BAArB,CAAmD,SAAnD;;UAdW;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAmBP,yBAnBO,qCAmBmB,uBAnBnB;IAAA;MAAA;QAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAyBP,SAzBO,qBAyBG,MAzBH;IAAA;MAAA;QAAA;UAAA;YA0BX,kBAAkB,GAAG,SAArB,CAA+B,MAA/B;;UA1BW;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EA+BP,iBA/BO,6BA+BW,UA/BX;IAAA;MAAA;QAAA;UAAA;YAgCX,kBAAkB,GAAG,iBAArB,CAAuC,UAAvC;;UAhCW;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAqCb,wBArCa,oCAqCY,SArCZ,EAqC8B,CAE1C,CAvCY;EA2CP,mBA3CO,+BA2Ca,SA3Cb;IAAA;MAAA;QAAA;UAAA;YAAA,MA4CL,IAAI,UAAJ,CACJ,4BADI,+IA5CK;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAAA,CAAf","sourcesContent":["import { DEFAULT_APP_OPTIONS } from 'expo-firebase-core';\nimport { CodedError } from 'expo-modules-core';\n\nfunction getFirebaseModule() {\n  try {\n    const firebaseModule = require('firebase/compat/app');\n    const firebase = firebaseModule.initializeApp ? firebaseModule : firebaseModule.default;\n    if (DEFAULT_APP_OPTIONS && !firebase.apps.length) {\n      firebase.initializeApp(DEFAULT_APP_OPTIONS);\n    }\n    return firebase;\n  } catch ({ message }) {\n    throw new Error('Firebase JS SDK is not installed: ' + message);\n  }\n}\nfunction getAnalyticsModule() {\n  try {\n    const firebase = getFirebaseModule();\n    require('firebase/compat/analytics');\n    return firebase.analytics();\n  } catch ({ message }) {\n    throw new Error('Firebase JS Analytics SDK is not available: ' + message);\n  }\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFirebaseAnalytics';\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#log-event\n   */\n  async logEvent(name: string, properties?: { [key: string]: any }): Promise<void> {\n    getAnalyticsModule().logEvent(name, properties);\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-analytics-collection-enabled\n   */\n  async setAnalyticsCollectionEnabled(isEnabled: boolean): Promise<void> {\n    getAnalyticsModule().setAnalyticsCollectionEnabled(isEnabled);\n  },\n  /**\n   * Not supported on web, this method is a no-op\n   */\n  async setSessionTimeoutDuration(_sessionTimeoutInterval: number): Promise<void> {\n    // no-op\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-id\n   */\n  async setUserId(userId: string | null): Promise<void> {\n    getAnalyticsModule().setUserId(userId);\n  },\n  /**\n   * https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-properties\n   */\n  async setUserProperties(properties: { [key: string]: any }): Promise<void> {\n    getAnalyticsModule().setUserProperties(properties);\n  },\n  /**\n   * No implementation on web\n   */\n  setUnavailabilityLogging(isEnabled: boolean): void {\n    // nop\n  },\n  /**\n   * Not supported on web\n   */\n  async setDebugModeEnabled(isEnabled: boolean): Promise<void> {\n    throw new CodedError(\n      'ERR_FIREBASE_NOTCONFIGURED',\n      `setDebugModeEnabled is not available on the web. See \"https://firebase.google.com/docs/analytics/debugview\" on how to enable debug mode.`\n    );\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}